# -*- coding: utf-8 -*-
"""phase3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CvQn4grALA80HHrQgZs5GYzAvybokbBy
"""



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_csv('/path/to/your/traffic_accidents.csv')

# Debugging print: Check first few rows of data
print("Data preview:")
print(df.head())

# Ensure the 'datetime' column is correctly parsed
df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')
print("\nAfter datetime conversion:")
print(df.head())

# Encode categorical features
le = LabelEncoder()
df['weather'] = le.fit_transform(df['weather'])
df['road_condition'] = le.fit_transform(df['road_condition'])
df['light_condition'] = le.fit_transform(df['light_condition'])

# Feature Engineering
df['hour'] = pd.to_datetime(df['datetime']).dt.hour

# Debugging print: Check for missing values
print("\nMissing values after encoding and feature engineering:")
print(df.isnull().sum())

# Select features and target
features = ['weather', 'road_condition', 'light_condition', 'speed_limit', 'hour']
target = 'accident_severity'

X = df[features]
y = df[target]

# Check the feature set and target
print("\nFeature set and target:")
print(X.head())
print(y.head())

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Accident Severity Prediction')
plt.show()